+PART[compChip_v2]:NEEDS[Squad]
{
    @name = compChip_accelerometer
    @title = CW Accelerometer Circuit Board
    @description = Using the basic hardware in the computer core, this chip will allow measurements of the acceleration of your craft and all that movement-based sciency stuff.

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_sensor;shield_blank;shield_control;shield_info
        textureDisplayNames = Sensor;Blank;Control;Info
    }

    MODULE
    {
        name = ModuleEnviroSensor
        sensorType = ACC
    }

    MODULE
    {
        name = ModuleScienceExperiment	

        experimentID = seismicScan

        experimentActionName = Log Seismic Data
        resetActionName = Delete Data

        useStaging = False
        useActionGroups = True
        hideUIwhenUnavailable = False	

        xmitDataScalar = 0.45
        dataIsCollectable = True
        collectActionName = Take Data
        interactionRange = 1.2

        rerunnable = True
    }
}

+PART[compChip_v2]:NEEDS[Squad]
{
    @name = compChip_barometer
    @title = CW Barometer Circuit Board
    @description = Using the basic hardware in the computer core, this chip will allow measurements of pressures and other atmospheric properties.
    
    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_sensor;shield_blank;shield_control;shield_info
        textureDisplayNames = Sensor;Blank;Control;Info
    }

    MODULE
    {
        name = ModuleEnviroSensor
        sensorType = PRES
    }

    MODULE
    {
        name = ModuleScienceExperiment	

        experimentID = barometerScan

        experimentActionName = Log Pressure Data
        resetActionName = Delete Data

        useStaging = False
        useActionGroups = True
        hideUIwhenUnavailable = False

        xmitDataScalar = 0.5
        dataIsCollectable = True
        collectActionName = Take Data
        interactionRange = 1.2

        rerunnable = True
    }
}

+PART[compChip_v2]:NEEDS[Squad]
{
    @name = compChip_gravitometer
    @title = CW Gravitometer Circuit Board
    @description = Using the basic hardware in the computer core, this chip will allow measurements of gravitational forces including seismic activity.

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_sensor;shield_blank;shield_control;shield_info
        textureDisplayNames = Sensor;Blank;Control;Info
    }

    MODULE
    {
        name = ModuleEnviroSensor
        sensorType = GRAV
    }

    MODULE
    {
        name = ModuleScienceExperiment	

        experimentID = gravityScan

        experimentActionName = Log Gravity Data
        resetActionName = Delete Data

        useStaging = False
        useActionGroups = True
        hideUIwhenUnavailable = False

        xmitDataScalar = 0.4
        dataIsCollectable = True
        collectActionName = Take Data
        interactionRange = 1.2

        rerunnable = True
    }
}

+PART[compChip_v2]:NEEDS[Squad]
{
    @name = compChip_thermometer
    @title = CW Thermometer Circuit Board
    @description = Using the basic hardware in the computer core, this chip will allow measurements of temperature data.

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_sensor;shield_blank;shield_control;shield_info
        textureDisplayNames = Sensor;Blank;Control;Info
    }

    MODULE
    {
        name = ModuleEnviroSensor
        sensorType = TEMP
    }

    MODULE
    {
        name = ModuleScienceExperiment	

        experimentID = temperatureScan

        experimentActionName = Log Temperature
        resetActionName = Delete Data

        useStaging = False
        useActionGroups = True
        hideUIwhenUnavailable = False

        xmitDataScalar = 0.5

        dataIsCollectable = True		
        collectActionName = Take Data
        interactionRange = 1.2

        rerunnable = True
    }
}

+PART[compChip_v2]:NEEDS[B9_Aerospace]
{
    @name = compChip_B9_info
    @title = CW B9 Information Circuit Board
    @description = This chip allows use of the "i" key to toggle a list of data about your craft. select this part or use the "i" key while on the Action Groups tab to edit that information.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
    {
        name = FSinfoPopup
        textHeading = Craft Information
        textBody1 = 1 - 
        textBody2 = 2 - 
        textBody3 = 3 - 
        textBody4 = 4 - 
        textBody5 = 5 - 
        textBody6 = 6 - 
        textBody7 = 7 - 
        textBody8 = 8 - 
        textBody9 = 9 - 
        textBody10 = 0 - 
        textBody11 = Press [ i ] to toggle this window.
        showAtFlightStart = true
        hideAfterCountdown = true
        showOnEachFlightStart = true
        countDownDuration = 30f
        toggleKey = i
    }
}

+PART[compChip_v2]:NEEDS[TTNeverUnload]
{
    @name = compChip_TT_neverUnload
    @title = CW TT Never-Unload Circuit Board
    @description = Recovery of a craft is key in many cases. Unfortunately, that requires tracking of the vessel to it's final resting place. With this part that information can be relayed back to mission control for later use.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = TTNeverUnload
        //Use this to set your own unload values, if you feel it neccesary.
        enabledunload = 800000
    }
}

+PART[compChip_v2]:NEEDS[WarpPlugin]
{
    @name = compChip_superComputer
    @title = CW Super-Computing Circuit Board
    @description = It used to be that control of warp technology required massive super computers. But no longer! Through the use of quantum-computing, this tiny chip will allow the craft it is attached to to execute all the calculations of its much larger predecessor, but at twice the power requirement.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
    {
        name = ComputerCore
        originalName = Standard Mainframe Core
        megajouleRate = 2
        upgradedName = AGI Core
        upgradeCost = 1200
        upgradedMegajouleRate = 10
        upgradeTechReq = none
    }

    RESOURCE
    {
        name = Megajoules
        amount = 0
        maxAmount = 0.01
    }
}

+PART[compChip_v2]:NEEDS[SCANsat]
{
    @name = compChip_scanSat_traq
    @title = CW MapTraq Circuit Board
    @description = This chip will allow communication with a mapping satellite network and display a map and your position on it.
    
    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
    {
        name = SCANsat
        sensorType = 0
        fov = 0
        min_alt = 0
        max_alt = 0
        best_alt = 0
        power = 0.05
        scanName = Eyeball Scan
    }
}

+PART[compChip_v2]:NEEDS[Firespitter]
{
    @name = compChip_FS_movecraft
    @title = CW FS Craft Position Circuit Board
    @description = Attaching this ship will set your vessel's launch location to the water just off the coast of the KSC. WARNING: do not use while KerbTown is installed.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = FSmoveCraftAtLaunch
        moveAtLaunch = True

        timer = 12.0
    }
}

+PART[compChip_v2]:NEEDS[Firespitter]
{
    @name = compChip_FS_trim
    @title = CW FS Trim Circuit Board
    @description = This chip allows the use of information and adjustment dialogs for your vessel's trim.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = FStrimAdjustment
        axis = Pitch
        buttonIncrements = 0.01	
        moduleID = 0
    }

    MODULE
    {
        name = FStrimAdjustment
        axis = Roll
        buttonIncrements = 0.0005
        moduleID = 1
    }

    MODULE
    {
        name = FStrimAdjustment
        axis = Yaw
        buttonIncrements = 0.01
        moduleID = 2
    }
}

+PART[compChip_v2]:NEEDS[IDSkillfulR1]
{
    @name = compChip_ID_tag
    @title = CW Friend-or-Foe Identifier Circuit Board
    @description = Don't get shot down by your buddies! This board allows your vessel to broadcast your loyalties.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
    {
        name = relayIFF
        setIFF = red
    }
}

+PART[compChip_v2]:NEEDS[Engineer|KerbalEngineer]
{
    @name = compChip_KER_build
    @title = CW Construction Engineer Circuit Board
    @description = While this chip is installed information about a vessel's physical properties and construction becomes available.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
	{
		name = BuildEngineer
	}
}

+PART[compChip_v2]:NEEDS[Engineer|KerbalEngineer]
{
    @name = compChip_KER_flight
    @title = CW Flight Engineer Circuit Board
    @description = Installation will enable in-flight information about the dynamic affects acting on your craft.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_red;chip_grey;chip_green;chip_blue
        textureDisplayNames = Red;Grey;Green;Blue
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_info;shield_sensor;shield_blank;shield_control
        textureDisplayNames = Info;Sensor;Blank;Control
    }

    MODULE
    {
	name = FlightEngineer
    }
}

+PART[compChip_v2]:NEEDS[RemoteTech2]
{
    @name = compChip_RT_SPU
    @title = CW RT SPU Circuit Board
    @description = This firm-ware based program will allow the craft it is attached to to become a passive relay for radio signals. Critical for Remote Technology.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = ModuleSPUPassive
    }
}

+PART[compChip_v2]:NEEDS[RemoteTech2]
{
    @name = compChip_RT_antenna
    @title = CW RT Antenna Circuit Board
    @description = This chip enables the antenna built into the computer core. It is only necessary for interaction with it. We swear. No, no it's not he antenna it's self. That would be ridiculous. 

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = ModuleRTAntenna
        IsRTActive = true
        Mode0OmniRange = 0
        Mode1OmniRange = 5000000
        EnergyCost = 0.01

        TRANSMITTER
        {
            PacketInterval = 0.3
            PacketSize = 2
            PacketResourceCost = 15.0
        }
    }
}

+PART[compChip_mechJeb]:NEEDS[MechJeb2]
{
    @name = compChip_mechJeb
    @title = CW MechJeb Circuit Board
    @description = Tired of having to work? This handy chip will let mechanical Jeb do everything for you! Flawlessly. Every time. Just ask anyone on the forum.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = MechJebCore
        MechJebLocalSettings {
            MechJebModuleCustomWindowEditor { unlockTechs = flightControl }
            MechJebModuleSmartASS { unlockTechs = flightControl }
            MechJebModuleManeuverPlanner { unlockTechs = advFlightControl }
            MechJebModuleNodeEditor { unlockTechs = advFlightControl }
            MechJebModuleTranslatron { unlockTechs = advFlightControl }
            MechJebModuleWarpHelper { unlockTechs = advFlightControl }
            MechJebModuleAttitudeAdjustment { unlockTechs = advFlightControl }
            MechJebModuleThrustWindow { unlockTechs = advFlightControl }
            MechJebModuleRCSBalancerWindow { unlockTechs = advFlightControl }
            MechJebModuleRoverWindow { unlockTechs = fieldScience }
            MechJebModuleAscentGuidance { unlockTechs = unmannedTech }
            MechJebModuleLandingGuidance { unlockTechs = unmannedTech }
            MechJebModuleSpaceplaneGuidance { unlockTechs = unmannedTech }
            MechJebModuleDockingGuidance { unlockTechs = advUnmanned }
            MechJebModuleRendezvousAutopilotWindow { unlockTechs = advUnmanned }
            MechJebModuleRendezvousGuidance { unlockTechs = advUnmanned }
        }
    }
}

+PART[compChip_v2]:NEEDS[kOS]
{
    @name = compChip_kOS
    @title = CW Kerbal Operating System Circuit Board
    @description = This advanced operating system adds user-interface into the heart and soul of a vessel. Input your own programs and execute for total control of a ship. other chips may be necessary for retrieval of data used by your program. Consult the kOS owner's manual for more information.

    @MODULE[FStextureSwitch2],0
    {
        textureNames = chip_blue;chip_red;chip_grey;chip_green
        textureDisplayNames = Blue;Red;Grey;Green
    }

    @MODULE[FStextureSwitch2],1
    {
        textureNames = shield_control;shield_info;shield_sensor;shield_blank
        textureDisplayNames = Control;Info;Sensor;Blank
    }

    MODULE
    {
        name = kOSProcessor
    }
}
